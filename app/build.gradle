apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "edu.gatech.seclass.wordfind6300"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    lintOptions {
        abortOnError true
        warningsAsErrors true
        disable 'AllowBackup', 'GradleDependency', 'InvalidPackage'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation "androidx.room:room-runtime:2.2.4"
    annotationProcessor "androidx.room:room-compiler:2.2.4"
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    testImplementation 'org.mockito:mockito-core:2.1.0'
}

def checkstyleFile = rootProject.file("config/checkstyle/checkstyle.xml")

checkstyle {
    configFile = checkstyleFile
    configDirectory = rootProject.file("config/checkstyle/")
    toolVersion '8.29'
}

def verifyCheckstyleTask = task verifyAndroidCheckstyle(type: Checkstyle, group: 'verification') {
    maxWarnings = 0
    maxErrors = 0
    configFile = checkstyleFile
    source fileTree(dir: "$project.projectDir/src/")
    ignoreFailures = false
    include '**/*.java'
    exclude '**/generated/**', 'test/**/*.java'
    classpath = files(
            fileTree(
                    dir: "${project.buildDir}/intermediates/javac/",
                    excludes: ['**/R.class', '**/R$*.class', 'android/**/*.*', '**/Manifest*.*'],
                    includes: ["**/*.class"]
            )
    )
    reports {
        xml {
            enabled false
        }
        html {
            enabled true
            destination file("${project.buildDir}/reports/checkstyle/checkstyle.html")
        }
    }
}

tasks["check"].dependsOn(verifyCheckstyleTask)
